import random
import time
# quicksort is broken
def insertionSort(alist):
    for index in range(1, len(alist)):
        Temp = alist[index] 
        position = index
      
        while position > 0 and alist[position - 1] > Temp:
            alist[position] = alist[position - 1]  
            position = position - 1

        alist[position] = Temp

def bubbleSort(alist):
    n = len(alist)
    for i in range(n - 1):
        for j in range(n - i - 1):
            if alist[j] > alist[j + 1]:
                alist[j], alist[j + 1] = alist[j + 1], alist[j]

def selectionSort(alist):
    n = len(alist)
    for i in range(n):
        min_index = i
        for j in range(i + 1, n):
            if alist[j] < alist[min_index]:
                min_index = j
        alist[i], alist[min_index] = alist[min_index], alist[i]

def mergeSort(alist):
    if len(alist) > 1:
        mid = len(alist) // 2
        left_half = alist[:mid]
        right_half = alist[mid:]

        mergeSort(left_half)
        mergeSort(right_half)

        i = j = k = 0

        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                alist[k] = left_half[i]
                i += 1
            else:
                alist[k] = right_half[j]
                j += 1
            k += 1

        while i < len(left_half):
            alist[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            alist[k] = right_half[j]
            j += 1
            k += 1

def partition(alist, low, high):
    pivot = alist[high]
    i = low - 1
    for j in range(low, high):
        if alist[j] < pivot:
            i += 1
            alist[i], alist[j] = alist[j], alist[i]
    alist[i + 1], alist[high] = alist[high], alist[i + 1]
    return i + 1

def quickSort(alist, low, high):
    if low < high:
        pi = partition(alist, low, high)
        quickSort(alist, low, pi)
        quickSort(alist, pi + 1, high) 


def sort_and_measure_time(algorithm, alist):
    start_time = time.time()
    algorithm(alist)
    end_time = time.time()
    return end_time - start_time

algorithm_choice = int(input("Choose a sorting algorithm:\n1. Insertion Sort\n2. Bubble Sort\n3. Selection Sort\n4. Merge Sort\n5. Quick Sort\n"))
sorting_algorithms = [insertionSort, bubbleSort, selectionSort, mergeSort, quickSort]

if 1 <= algorithm_choice <= 5:
    selected_algorithm = sorting_algorithms[algorithm_choice - 1]
    testing123 = [random.randint(1, 100000) for _ in range(10000)]
    

    time_taken = sort_and_measure_time(selected_algorithm, testing123)

    print("Start of the sorted List:", testing123[:50])  

    print("Time taken:", time_taken, "seconds")
else:
    print("Invalid choice. Please select a valid sorting algorithm.")
